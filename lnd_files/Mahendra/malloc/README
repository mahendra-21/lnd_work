+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 In this direcory contains :
--------------------------
-> Source directory
    which having the file's my_alloc.c, my_free.c, binary_print.c
    These are the Own implemented malloc & free functions.

-> Header directory
    which having alloc.h header file. This header file contains the function
    declarations needed by the user.

-> Object directory
    which having the relocatable object files generated while building
    the source directory files. These files are using while creating the
    library(static).

-> Library directory
    which having the static library file, created while running the Make.

-> TEST directory
    which having all the test file's.

-> EXEC directory
    which having all the executables generated to the test files.

-> Output directory
    which having the all output files (all o/p's are redirected into 
    this directory)

-> Makefile 
    It builds the all relocatable object file's to the source directory files 
    and with the help of all ROF's in object directory creating static library.
    
    And this Makefile also builds executable's to all the Test directory files.

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 
 NAME
        my_alloc, my_free - allocate and free the memory
 
 SNOPSIS
        #include <alloc.h>

        void *my_alloc(size_t size);
        void my_free(void *ptr);

 DESCRIPTION
        The my_alloc() function allocates size bytes and returns a pointer
        to the allocated memory which is in statically taken.
         
        WORKING OF my_alloc() Function:
            -> If user invokes this function with size 10 bytes, based on
               4 bytes alignment my_alloc() function allocates 12 bytes to
               the user. And 3 bits are set in the meta_data.

               Bit representation in the meta_data is like this:
               --> for 10-bytes(12-bytes are allocating) (3 bits are setting)
               11100000 00000000 00000000 00000000 00000000
               00000000 00000000 00000000 00000000 00000000

            -> Next time user ask 20 bytes, based on 4-bytes alignment
               my_alloc() function allocates 20 bytes and in meta_data
               5 bits are set by leaving 1 bit to differentiate the each
               allocation.
              
               Bit representation in the meta_data is like this:
               --> for 20-bytes(5 bits are set in meta_data)
               11101111 10000000 00000000 00000000 00000000
               00000000 00000000 00000000 00000000 00000000

        The my_free() function frees the allocted size based up on address
        passed to the function my_free().

        WORKING OF my_free() Function:
            -> In this function user pass the address which is given by the
               my_alloc() function. Based upon the address here freeing the 
               memory that means clearing the bits by moving that location
               where has to be clear the bits.
               
               Bit representation in the meta_data is like this:
               --> freeing first allocated memory(12 bytes -> 3 bits are
                   clearing).
               00001111 10000000 00000000 00000000 00000000
               00000000 00000000 00000000 00000000 00000000

       After freeing the memory next time user wants to allocate memory
       at that time  user asks lessthan or equal to 12 bytes my_alloc()
       function allocates the memory at the same location other-wise allocates
       at the last allocated position onwards.
               
       Bit representation in the meta_data is like this:
       --> Again user ask's 12 bytes
           11101111 10000000 00000000 00000000 00000000
           00000000 00000000 00000000 00000000 00000000
       
       --> Again user ask's 30 bytes
           00001111 10111111 11000000 00000000 00000000
           00000000 00000000 00000000 00000000 00000000
 
 RETURN VALUES
    my_alloc() funtion returns Address on success and my_free() funtion
    returns nothing. On failure my_alloc() function returns NULL.

    If user ask 0 bytes my_alloc() function returns address but it won't
    allocte memory for it.

+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
